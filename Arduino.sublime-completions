{
	"scope": "source.c++.arduino",
	"completions": [
		{"trigger": "setup", "contents": "$1\nsetup() {\n\t//statements\n}\nloop() {\n\t//statements\n}\n"},

		{"trigger": "digR", "contents": "digitalRead(${1:pin});"},
		{"trigger": "digW", "contents": "digitalWrite(${1:pin}, ${2:HIGH});"},
		{"trigger": "pinM", "contents": "pinMode(${1:LED_BUILTIN}, ${2:OUTPUT});"},

		{"trigger": "anR", "contents": "analogRead(${1:pin});"},
		{"trigger": "anRef", "contents": "analogReference(${1:DEFAULT});"},
		{"trigger": "anW", "contents": "analogWrite(${1:pin}, ${2:value});"},

		{"trigger": "anRRes", "contents": "analogReadResolution(${1:bits});"},
		{"trigger": "anWRes", "contents": "analogWriteResolution(${1:bits});"},

		{"trigger": "rand", "contents": "random(${1:min /*optional*/}, ${2:max});"},
		{"trigger": "randS", "contents": "randomSeed(${1:analogRead(0)});"},

		{"trigger": "abs", "contents": "abs(${1:-1});"},
		{"trigger": "constr", "contents": "constrain(${1:intValue}, ${2:minRange}, ${3:maxRange});"},
		{"trigger": "map", "contents": "map(${1:value}, ${2:fromLow}, ${3:fromHigh}, ${4:toLow}, ${5:toHigh});"},
		{"trigger": "max", "contents": "max(${1:value}, ${2:max});"},
		{"trigger": "min", "contents": "min(${1:value}, ${2:min});"},
		{"trigger": "pow", "contents": "pow(${1:base}, ${2:exponent});"},
		{"trigger": "sq", "contents": "sq(${1:value});"},
		{"trigger": "sqrt", "contents": "sqrt(${1:value});"},

		{"trigger": "cos", "contents": "cos(${1:radian});"},
		{"trigger": "sin", "contents": "sin(${1:radian});"},
		{"trigger": "tan", "contents": "tan(${1:radian});"},

		{"trigger": "bit", "contents": "bit(${1:n});"},
		{"trigger": "bitC", "contents": "bitClear(${1:value}, ${2:whichBit});"},
		{"trigger": "bitR", "contents": "bitRead(${1:value}, ${2:whichBit});"},
		{"trigger": "bitS", "contents": "bitSet(${1:value}, ${2:whichBit});"},
		{"trigger": "bitW", "contents": "bitWrite(${1:value}, ${2:whichBit}, ${3:1or0});"},
		{"trigger": "highBy", "contents": "highByte(${1:wordValue});"},
		{"trigger": "lowBy", "contents": "lowByte(${1:wordValue});"},

		{"trigger": "tone", "contents": "tone(${1:pin}, ${2:frequency}, ${3:duration /*optional*/});"},
		{"trigger": "noTone", "contents": "noTone(${1:pin});"},
		{"trigger": "pulseIn", "contents": "pulseIn(${1:pin}, ${2:value}, ${3:timeout /*optional*/});"},
		{"trigger": "pulseInLong", "contents": "pulseInLong(${1:pin}, ${2:value}, ${3:timeout /*optional*/});"},
		{"trigger": "shiftIn", "contents": "shiftIn(${1:dataPin}, ${2:clockPin}, ${3:bitOrder});"},
		{"trigger": "shiftOut", "contents": "shiftOut(${1:dataPin}, ${2:clockPin}, ${3:bitOrder}, ${4:value});"},

		{"trigger": "delay", "contents": "delay(${1:ms});"},
		{"trigger": "delayMic", "contents": "delayMicroseconds(${1:us});"},
		{"trigger": "micros", "contents": "micros();"},
		{"trigger": "millis", "contents": "millis();"},

		{"trigger": "attachInt", "contents": "attachInterrupt(digitalPinToInterrupt(${1:pin}), ${2:ISR}, ${3:mode});"},
		{"trigger": "detachInt", "contents": "detachInterrupt(digitalPinToInterrupt(${1:pin}));"},

		{"trigger": "isAl", "contents": "isAlpha(${1:char});"},
		{"trigger": "isAlNum", "contents": "isAlphaNumeric(${1:char});"},
		{"trigger": "isAsc", "contents": "isAscii(${1:char});"},
		{"trigger": "isCtrl", "contents": "isControl(${1:char});"},
		{"trigger": "isDig", "contents": "isDigit(${1:char});"},
		{"trigger": "isGraph", "contents": "isGraph(${1:char});"},
		{"trigger": "isHex", "contents": "isHexadecimalDigit(${1:char});"},
		{"trigger": "isLowerCase", "contents": "isLowerCase(${1:char});"},
		{"trigger": "isUpperCase", "contents": "isUpperCase(${1:char});"},
		{"trigger": "isPrintable", "contents": "isPrintable(${1:char});"},
		{"trigger": "isPunct", "contents": "isPunct(${1:char});"},
		{"trigger": "isSpace", "contents": "isSpace(${1:char});"},
		{"trigger": "isWhitespace", "contents": "isWhitespace(${1:char});"},

		{"trigger": "Serial.available",			"contents": "Serial.available();"},
		{"trigger": "Serial.availableForWrite",	"contents": "Serial.availableForWrite();"},
		{"trigger": "Serial.begin",				"contents": "Serial.begin(${1:speed}, ${2:config /*optional*/});"},
		{"trigger": "Serial.end",				"contents": "Serial.end();"},
		{"trigger": "Serial.find",				"contents": "Serial.find(${1:target}, ${2:length /*optional*/});"},
		{"trigger": "Serial.findUntil",			"contents": "Serial.findUntil(${1:target}, ${2:terminal});"},
		{"trigger": "Serial.flush",				"contents": "Serial.flush();"},
		{"trigger": "Serial.parseFloat",		"contents": "Serial.parseFloat(${1:lookahead}, ${2:ignoreChar /*optional*/});"},
		{"trigger": "Serial.parseInt",			"contents": "Serial.parseInt(${1:lookahead}, ${2:ignoreChar /*optional*/});"},
		{"trigger": "Serial.peek",				"contents": "Serial.peek();"},
		{"trigger": "Serial.print",				"contents": "Serial.print(${1:value}, ${2:format /*optional*/});"},
		{"trigger": "Serial.println",			"contents": "Serial.println(${1:value}, ${2:format /*optional*/});"},
		{"trigger": "Serial.read",				"contents": "Serial.read();"},
		{"trigger": "Serial.readBytes",			"contents": "Serial.readBytes(${1:buffer}, ${2:length});"},
		{"trigger": "Serial.readBytesUntil",	"contents": "Serial.readBytesUntil(${1:char}, ${2:buffer}, ${3:length});"},
		{"trigger": "Serial.readString",		"contents": "Serial.readString();"},
		{"trigger": "Serial.readStringUntil",	"contents": "Serial.readStringUntil(${1:terminatorChar});"},
		{"trigger": "Serial.setTimeout",		"contents": "Serial.setTimeout(${1:durationMs});"},
		{"trigger": "Serial.write",				"contents": "Serial.write(${1:data}, ${2:datalength});"},
		{"trigger": "serialEvent", 				"contents": "serialEvent() {\n\t$1\n}"},

		{"trigger": "keyboard", "contents": "#include <Keyboard.h>\n"},
		{"trigger": "Keyboard.begin", "contents": "Keyboard.begin();"},
		{"trigger": "Keyboard.end", "contents": "Keyboard.end();"},
		{"trigger": "Keyboard.press", "contents": "Keyboard.press(${1:char});"},
		{"trigger": "Keyboard.release", "contents": "Keyboard.release(${1:char});"},
		{"trigger": "Keyboard.print", "contents": "Keyboard.print(${1:chars});"},
		{"trigger": "Keyboard.println", "contents": "Keyboard.println(${1:chars});"},
		{"trigger": "Keyboard.releaseAll", "contents": "Keyboard.releaseAll();"},
		{"trigger": "Keyboard.write", "contents": "Keyboard.write(${1:asciiChar});"},

		{"trigger": "mouse", "contents": "#include <Mouse.h>\n"},
		{"trigger": "Mouse.begin", "contents": "Mouse.begin();"},
		{"trigger": "Mouse.end", "contents": "Mouse.end();"},
		{"trigger": "Mouse.click", "contents": "Mouse.click(${1:button});"},
		{"trigger": "Mouse.move", "contents": "Mouse.move(${1:X}, ${2:Y}, ${3:scrool});"},
		{"trigger": "Mouse.press", "contents": "Mouse.press(${1:button});"},
		{"trigger": "Mouse.release", "contents": "Mouse.release(${1:button});"},
		{"trigger": "Mouse.isPressed", "contents": "Mouse.isPressed(${1:button});"},

		{"trigger": "H", "contents": "HIGH"},
		{"trigger": "L", "contents": "LOW"},
		{"trigger": "IN", "contents": "INPUT"},
		{"trigger": "OUT", "contents": "OUTPUT"},
		{"trigger": "PUL", "contents": "INPUT_PULLUP"},
		{"trigger": "LED", "contents": "LED_BUILTIN"},

		{"trigger": "sizeof", "contents": "sizeof(${1:variable});"},

		{"trigger": "br", "contents": "break;"},
		{"trigger": "con", "contents": "continue;"},
		{"trigger": "dowhile", "contents": "do {\n\t${2://statements}\n} while(${1:condition});"},
		{"trigger": "if", "contents": "if (${1:condition}) {\n\t${2://statements}\n}"},
		{"trigger": "elif", "contents": "else if (${1:condition}) {\n\t${2://statements}\n}"},
		{"trigger": "el", "contents": "else {\n\t${1://statements}\n}"},
		{"trigger": "for", "contents": "for (${1:init}; ${2:cond}; ${3:inc}) {\n\t${4://statements}\n}"},
		{"trigger": "goto", "contents": "goto ${1:label};\n"},
		{"trigger": "ret", "contents": "return $1;"},
		{"trigger": "switch", "contents": "switch (${1:val}) {\ncase ${2:theCase}:\n//statements\nbreak;\ndefault:\n//statements\nbreak;\n}"},
		{"trigger": "while", "contents": "while (${1:cond}) {\n${2://statements}\n}"}
	]
}
